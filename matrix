#!/bin/bash

################################################################################
#Title: Matrix
#Author: Tiffani Auer (frieseti@oregonstate.edu)
#Class: OS CS344 - Winter 2019
################################################################################

temp="temp$$"
tempmtrx="tempmtrx$$"
temprow="temprow$$"
tempcol="tempcol$$"
tempmean="tempmean$$"
tempsum="tempsum$$"
tempavg="tempavg$$"


################################################################################
#Title: clean 
#
#Description: removes temporary files

################################################################################
clean(){
	rm -f *$$
}

trap clean INT HUP TERM

################################################################################
#Title: dims 
#
#Description: takes a single matrix and finds its dimenstions. It then prints 
#them to screen as "Rows Cols"
################################################################################
function dims(){ 
	l=0
	c=0

	#rows#
	l=$(cat $1 | wc -l)

	#columns#
	c=$(cat $1 | head -n 1 | wc -w)
	
	#print dimensions#
	echo -e  "$l $c"
}

################################################################################
#Title: transpose
#
#Description: takes a single matrix and turns it's columns into it's rows, then
#prints the new matrix to screen
################################################################################
function transpose(){
	j=1
	c=0

	c=$(cat $1 | head -n 1 | wc -w)
	
	#column to row conversion
	while [[ "$j" -le "$c" ]]
	do			
		cut -f $j $1 > $tempcol
		truncate -s-1 $tempcol
		cat $tempcol | tr '\n' '\t' >> $temprow
		echo >> $temprow
		((j++))
	done
	
	cat $temprow
}

################################################################################
#Title: mean
#
#Description: takes one matrix and finds the mean of each column, then prints
#the results to screen in matrix format
################################################################################
function mean(){		
	#use transpose function to invert matrix so we average the correct# 
	#numbers, dump output to temp file so it doesn't print to screen  #
	dump=$(transpose $1)

	#traverse through the matrix, one row at a time#
	while read row
	do
		#reset vars each iteration#
		sum=0
		count=0
		avg=0
		
		#add all numbers in row#
		for i in $row
		do
			sum=$((sum + i))
			((count++))		
		done
		
		#calculate mean#
		avg=$(((sum + (count/2)*((sum>0)*2 - 1) )/count))
		echo "$avg" >> $tempavg
	done <  $temprow
		
		#format totals for output#
		truncate -s-1 $tempavg	
		cat $tempavg | tr '\n' '\t' >> $tempmean
		echo >> $tempmean
		
		cat $tempmean
}

################################################################################
#Title: add
#
#Description: takes 2 matrices of the same size and adds each number in the
#same corresponding spot together. The resulting matrix is then printed to 
#screen
################################################################################
function add(){
	lcol=0
	lrow=0
	rcol=0
	rrow=0

	#get dimensions of matrices#	
	lrow=$(cat $1 | wc -l)
	lcol=$(cat $1 | head -n 1 | wc -w)

	rrow=$(cat $2 | wc -l)
	rcol=$(cat $2 | head -n 1 | wc -w)

	#separate the values#
	lft=$(cat $1 | tr '\t' '\n')
	rght=$(cat $2 | tr '\t' '\n') 
	
	#add the matrices#		
	while read lmtrx <&3 && read rmtrx <&4
	do
		sum=$((lmtrx + rmtrx))
		echo $sum > $tempsum
		cat $tempsum | tr '\n' '\t' >> $tempmtrx	
		((k++))

		#add \n for new matrix row#
		if [[ $k -eq  $lcol ]]
		then
			truncate -s -1 $tempmtrx
			echo >> $tempmtrx
			k=0
		fi
	done 3<<< "$lft" 4<<< "$rght"

	cat $tempmtrx
}

################################################################################
#Title: multiply 
#
#Description: multiply two matrices (not describing matrix multiplication here
#because it would take a ton of space, instead I offer this:
# https://www.mathsisfun.com/algebra/matrix-multiplying.html ). 
#Once the calculations are successfully processed through, the results matrix is
#printed to screen.  
################################################################################
function multiply(){	
	lcol=0
	lrow=0
	rcol=0
	rrow=0
	prod=1
	m=1
	n=1

	#get dimensions of matrices#	
	lrow=$(cat $1 | wc -l)
	lcol=$(cat $1 | head -n 1 | wc -w)

	rrow=$(cat $2 | wc -l)
	rcol=$(cat $2 | head -n 1 | wc -w)

	#reformat first matrix so matrices are same format to work with#	
	dump=$(transpose $1)
		
	#cycles through the left matrix#
	while [[ $m -le $lrow ]]
	do			
		
		lft=$(cut -f $m $temprow)

		#cycles through the right matrix#				
		while [[ $n -le $rcol ]]
		do
			rght=$(cut -f $n $2)
			((n++))
			
			#multiply the matrices#		
			while read lmtrx <&3 && read rmtrx <&4
			do
				prod=$((lmtrx * rmtrx))
				sum=$((sum + prod))
			done 3<<< "$lft" 4<<< "$rght"				
				
			echo $sum | tr '\n' '\t' >> $tempmtrx	
			prod=1
			sum=0
		done
		truncate -s-1 $tempmtrx
		echo >> $tempmtrx
		n=1
		((m++))	
	done
	
	cat $tempmtrx
}


################################################################################
#Title: readmtrx 
#
#Description: I made this function to help me with debugging and clarity. It 
#isn't req'd, but also isn't causing any problems, and I've grown quite fond
#of it, so it stays. 
################################################################################
function readmtrx(){
while read mtrx
do
	echo "$mtrx"
done < $1

}



################################################################################
#Title: main
#
#Description: Validates input as required for each function called, then, if 
#valid, calls desired function. When said function is finished running it calls
#clean to clean up any temporary files.
################################################################################
main(){
 
#validate input and call functions#
case $1 in
	dims)
		#gives input from stdin permanency#
		cat $2 > $temp
		
		#too many args#
		if [[ -f $3 ]]
		then
			echo "dims goes dark with more than one matrix." >&2
			clean
			exit 1
		#file is unreadable#
		elif [ ! -f $temp ] || [ ! -s $temp  ] || [ ! -r $temp ]
		then
			echo "yo' file is broke." >&2
			clean
			exit 1
		else
			dims $temp
		fi
	;;
	transpose)
		
		if [[ -f $3 ]]
		then
			echo "more than one matrix makes transpose cry." >&2
			clean
			exit 1
		elif [ ! -f $2 ] || [ ! -s $2 ] || [ ! -r $2 ]
		then
			echo "your file in unreadable, son!" >&2
			clean
			exit 1
		else
			transpose $2
		fi
	;;
	mean)
		if [[ -f $3  ]]
		then
			echo "we are finding the average of one matrix, not the entire neighborhood! Geeze." >&2
			clean
			exit 1
		elif [ ! -f $2 ] || [ ! -s $2 ] || [ ! -r $2 ]
		then
			echo "i'm tryin' to read, but you gotta give me something, man!" >&2
			clean
			exit 1
		else
			mean $2
		fi
	;;
	add)	
		#get dimensions of matrices#	
		lrow=$(cat $2 | wc -l)
		lcol=$(cat $2 | head -n 1 | wc -w)

		rrow=$(cat $3 | wc -l)
		rcol=$(cat $3 | head -n 1 | wc -w)

	
		if [[ -f $4 ]]
		then
			echo "there are only so many usable seconds in a grading script. why are you giving me more than two matrices?!" >&2
			clean
			exit 1
		elif [ ! -f $2 ] || [ ! -s $2 ] || [ ! -r $2 ]
		then
			echo "check yo' file. I don't understand it." >&2
			clean
			exit 1
		elif [ ! -f $3 ] || [ ! -s $3 ] || [ ! -r $3 ]
		then
			echo "check yo' file. I don't understand it." >&2
			clean
			exit 1	#checking for an empty file#
		elif [ $lrow -eq 0 ] || [ $rrow -eq 0 ]
		then
			echo "empty files do not make for exciting addition." >&2
			exit 1	
		#checking that the matrices are the same size#
		elif [ $lrow -ne $rrow ] || [ $lcol -ne $rcol ]
		then		
			echo "your matrices are incompatible and will fight if put together." >&2
			exit 1
		else
			add $2 $3
		fi
	;;
	multiply)
		#get dimensions of matrices#	
		lrow=$(cat $2 | wc -l)
		lcol=$(cat $2 | head -n 1 | wc -w)

		rrow=$(cat $3 | wc -l)
		rcol=$(cat $3 | head -n 1 | wc -w)

	
		if [[ -f $4 ]]
		then
			echo "we've been over this. less is more." >&2
			clean
			exit 1
		elif [ ! -r $2 ] || [ ! -r $3 ]
		then
			echo "this makes no sense." >&2
			clean
			exit 1
		elif [ $lrow -eq 0 ] || [ $rrow -eq 0 ]
		then
			echo "**stares into the void**" >&2
			exit 1	
		#checks if the # of cols in the left matrix and # of rows in the right	#
		# matrix are equal. If not they are incompatible.			#
		elif [ $lcol -ne $rrow ]
		then		
			echo "you want them to fight, don't you?" >&2
			exit 1
		else
			multiply $2 $3
		fi
		
	;;
	readmtrx)
		# <3 #
		readmtrx $2
	;;
	#catchall for bad commands#
	*)
		echo "I see what you did there, you saucy minx. Of course, I already thought of that. This program has well defined parameters. Stay in you're lane. ;)" >&2 
		exit 1
	;;
esac 


clean

}
#pass arguments from user to main#
main $1 "${@:2}"
 
