#!/bin/bash

################################################################################
#Title: Matrix
#Author: Tiffani Auer (frieseti@oregonstate.edu)
#Class: OS CS344 - Winter 2019
#Description:
################################################################################

tempdims="tempdims$$"
temprow="temprow$$"
tempcol="tempcol$$"
tempmean="tempmean$$"
tempsum="tempsum$$"
tempdump="tempdump$$"
tempavg="tempavg$$"

#calls the clean function to clean up temp files at the end of the program, or #
#if the program is interrupted by one of the exceptions represented by the     #
#numbers: 0-exit from shell, 1-clean tidyup, 2-interrupt, 3-quit, 6-abort      #
#trap clean; INT HUP TERM

#dims funct#
function dims(){ 
	l=0
	c=0
	
	cat $1 >> $tempdims 
	
	#rows#
	l=$(cat $tempdims | wc -l)

	#columns#
	c=$(cat $tempdims | head -n 1 | wc -w)
	
	#print dimensions#
	echo -e  "$l $c"
}

#transpose funct#
function transpose(){
	j=1
	c=0

	#column count#
	c=$(cat $1 | head -n 1 | wc -w)
	
	#column to row conversion
	while [[ "$j" -le "$c" ]]
	do			
		cut -f  $j $1  > $tempcol
		truncate -s-1 $tempcol
		cat $tempcol | tr '\n' '\t' >> $temprow
		echo >> $temprow
		((j++))
	done
	
	cat $temprow
}


#mean funct#
function mean(){		
	#use transpose function to invert matrix so we average the correct# 
	#numbers, dump output to temp file#
	transpose $1 > $tempdump
	#echo: "transposed matrix:"
	#cat $temprow

	#traverse through the matrix#
	while read row
	do
		#reset vars each iteration#
		sum=0
		count=0
		avg=0

		for i in $row
		do
			#add all numbers in matrix#
			sum=$((sum + i))
			((count++))		
		#	echo "sum: $sum"
		#	echo "count: $count"
		done

		avg=$(((sum + (count/2)*((sum>0)*2 - 1) )/count))
		#echo "avg: $avg"
		echo "$avg" >> $tempavg
	done <  $temprow
		
		
		#echo "tempavg:"
		#cat "$tempavg"		
		truncate -s-1 $tempavg	
		cat $tempavg | tr '\n' '\t' >> $tempmean
		echo >> $tempmean
		cat $tempmean
}

#add funct#
function add(){
	echo "add successfully called!"
}

#multiply funct#
function multiply(){
	echo "multiply successfully called!"
}


#readMatrix funct#
function readmtrx(){
while read mtrx
do
	echo "$mtrx"
done < $1

}

#removes temporary files#
clean(){
	rm -f *$$
}

#argument 1 from user, identifies what function they would like to use (dims, transpose etc)
#, and the rest passes the matrices to the arguments 
$1 "${@:2}"
clean  
