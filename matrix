#!/bin/bash

################################################################################
#Title: Matrix
#Author: Tiffani Auer (frieseti@oregonstate.edu)
#Class: OS CS344 - Winter 2019
#Description:
################################################################################

tempmtrx="tempmtrx$$"
tempdims="tempdims$$"
temprow="temprow$$"
tempcol="tempcol$$"
tempmean="tempmean$$"
tempsum="tempsum$$"
tempavg="tempavg$$"
left="templeft$$"
right="tempright$$"
tempprod="tempprod$$"
mleft="templeft2$$"
mright="tempright2$$"


#calls the clean function to clean up temp files at the end of the program, or #
#if the program is interrupted by one of the exceptions represented by the     #
#numbers: 0-exit from shell, 1-clean tidyup, 2-interrupt, 3-quit, 6-abort      #
#trap clean; INT HUP TERM

#dims funct#
function dims(){ 
	l=0
	c=0
	
#	if [[ $# -ne 1 ]]
#	then
#		echo "Please only send one matrix at a time." > &2
#		clean
#		exit 2
#	elif [[ ! -s $1 || ! -f $1 ]]
#	then
#		echo "$1 is invalid or empty" > $stderr
#		clean
#		exit 2
#	fi
	
	cat $1 > $tempdims 
	
	#rows#
	l=$(cat $tempdims | wc -l)

	#columns#
	c=$(cat $tempdims | head -n 1 | wc -w)
	
	#print dimensions#
	echo -e  "$l $c"

	exit 0
}

#transpose funct#
function transpose(){
	j=1
	c=0

	#column count#
	c=$(cat $1 | head -n 1 | wc -w)
	
	#column to row conversion
	while [[ "$j" -le "$c" ]]
	do			
		cut -f $j $1 > $tempcol
		truncate -s-1 $tempcol
		cat $tempcol | tr '\n' '\t' >> $temprow
		echo >> $temprow
		((j++))
	done
	
	cat $temprow
}


#mean funct#
function mean(){		
	#use transpose function to invert matrix so we average the correct# 
	#numbers, dump output to temp file so it doesn't print to screen  #
	dump=$(transpose $1)


	#traverse through the matrix#
	while read row
	do
		#reset vars each iteration#
		sum=0
		count=0
		avg=0

		for i in $row
		do
			#add all numbers in matrix#
			sum=$((sum + i))
			((count++))		
		done

		avg=$(((sum + (count/2)*((sum>0)*2 - 1) )/count))
		echo "$avg" >> $tempavg
	done <  $temprow
		
		#format means for output and print to screen#
		truncate -s-1 $tempavg	
		cat $tempavg | tr '\n' '\t' >> $tempmean
		echo >> $tempmean
		cat $tempmean
}

#add funct#
function add(){
	lcol=0
	lrow=0
	rcol=0
	rrow=0

	#get dimensions of matrices#	
	lrow=$(cat $1 | wc -l)
	lcol=$(cat $1 | head -n 1 | wc -w)

	rrow=$(cat $2 | wc -l)
	rcol=$(cat $2 | head -n 1 | wc -w)

	#separate the values#
	cat $1 | tr '\t' '\n' > $left
	cat $2 | tr '\t' '\n' > $right
	
	#add the matrices#		
	while read lmtrx <&3 && read rmtrx <&4
	do
		sum=$((lmtrx + rmtrx))
		echo $sum > $tempsum
		cat $tempsum | tr '\n' '\t' >> $tempmtrx	
		((k++))

		#add \n for new matrix row#
		if [[ $k -eq  $lcol ]]
		then
			truncate -s -1 $tempmtrx
			echo >> $tempmtrx
			k=0
		fi
	done 3< $left 4< $right

	cat $tempmtrx
}

#multiply funct#
function multiply(){	
	lcol=0
	lrow=0
	rcol=0
	rrow=0
	prod=1
	m=1
	n=1

	#get dimensions of matrices#	
	lrow=$(cat $1 | wc -l)
	lcol=$(cat $1 | head -n 1 | wc -w)

	rrow=$(cat $2 | wc -l)
	rcol=$(cat $2 | head -n 1 | wc -w)

	#reformat first matrix so formats match#	
	dump=$(transpose $1)
		
	#this works correctly#
	while [[ $m -le $lrow ]]
	do			
		#cycles through the left matrix#
		cut -f $m $temprow > $left

		#cycles through the right matrix and multiplies with corresponding 	#
		#left matrix row							#
		while [[ $n -le $rcol ]]
		do
			cut -f $n $2 > $right
			((n++))
			
			#multiply the matrices#		
			while read lmtrx <&3 && read rmtrx <&4
			do
				prod=$((lmtrx * rmtrx))
				sum=$((sum + prod))
			done 3< $left 4< $right				
				
			echo $sum | tr '\n' '\t' >> $tempmtrx	
			prod=1
			sum=0
		done
		truncate -s-1 $tempmtrx
		echo >> $tempmtrx
		n=1
		((m++))	
	done
	
	cat $tempmtrx
}


#readMatrix funct#
function readmtrx(){
while read mtrx
do
	echo "$mtrx"
done < $1

}

#removes temporary files#
clean(){
	rm -f *$$
}

#argument 1 from user, identifies what function they would like to use (dims, transpose etc)
#, and the rest passes the matrices to the arguments 
$1 "${@:2}"
clean 

 
