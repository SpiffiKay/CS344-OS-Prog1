#!/bin/bash

################################################################################
#Title: Matrix
#Author: Tiffani Auer (frieseti@oregonstate.edu)
#Class: OS CS344 - Winter 2019
#Description:
################################################################################

tempdims="tempdims$$"
temprow="temprow$$"
tempcol="tempcol$$"
tempmean="tempmean$$"
tempsum="tempsum$$"
tempdump="tempdump$$"
tempavg="tempavg$$"
left="templeft$$"
right="tempright$$"
row="temprow$$"
col="tempcol$$"


#calls the clean function to clean up temp files at the end of the program, or #
#if the program is interrupted by one of the exceptions represented by the     #
#numbers: 0-exit from shell, 1-clean tidyup, 2-interrupt, 3-quit, 6-abort      #
#trap clean; INT HUP TERM

#dims funct#
function dims(){ 
	l=0
	c=0
	
	cat $1 > $tempdims 
	
	#rows#
	l=$(cat $tempdims | wc -l)

	#columns#
	c=$(cat $tempdims | head -n 1 | wc -w)
	
	#print dimensions#
	echo -e  "$l $c"
}

#transpose funct#
function transpose(){
	j=1
	c=0

	#column count#
	c=$(cat $1 | head -n 1 | wc -w)
	
	#column to row conversion
	while [[ "$j" -le "$c" ]]
	do			
		cut -f $j $1 > $tempcol
		truncate -s-1 $tempcol
		cat $tempcol | tr '\n' '\t' >> $temprow
		echo >> $temprow
		((j++))
	done
	
	cat $temprow
}


#mean funct#
function mean(){		
	#use transpose function to invert matrix so we average the correct# 
	#numbers, dump output to temp file so it doesn't print to screen  #
	transpose $1 > $tempdump


	#traverse through the matrix#
	while read row
	do
		#reset vars each iteration#
		sum=0
		count=0
		avg=0

		for i in $row
		do
			#add all numbers in matrix#
			sum=$((sum + i))
			((count++))		
		done

		avg=$(((sum + (count/2)*((sum>0)*2 - 1) )/count))
		echo "$avg" >> $tempavg
	done <  $temprow
		
		#format means for output and print to screen#
		truncate -s-1 $tempavg	
		cat $tempavg | tr '\n' '\t' >> $tempmean
		echo >> $tempmean
		cat $tempmean
}

#add funct#
function add(){
	lcol=0
	lrow=0
	rcol=0
	rrow=0
	i=1

	touch $tempcol
	touch $col

	cat $1 > $left
	cat $2 > $right

	#get dimensions of matrices#	
	lrow=$(cat $left | wc -l)
	lcol=$(cat $left | head -n 1 | wc -w)
	echo "left dimensions: $lrow $lcol"
	echo	

	rrow=$(cat $right | wc -l)
	rcol=$(cat $right | head -n 1 | wc -w)
	echo "right dimensions: $rrow $rcol"



	#read matrices into temp files at the same time. <&num redirects to #
	#specific file							    #
	#while read lmtrx <&3 && read rmtrx <&4
	#do
	#done 3<$left 4<$right

	while [[ "$i" -le "$lrow" ]]
	do
		j=1
	
		#column to row conversion
		while [[ "$j" -le "$lcol" ]]
		do			
			#cat $lmtrx | cut -f $j > $tempcol
			#truncate -s-1 $tempcol
			#cat $tempcol | tr '\n' '\t' >> $temprow
			#echo >> $temprow
			#((j++))
			#echo "temprow: "
			#cat $temprow
			
			#cat $rmtrx | cut -f $j > $col
			#truncate -s-1 $col
			#cat $col | tr '\n' '\t' >> $row
			#echo >> $row
			#((j++))
			#echo "tempcol: "
			#cat $row
	
			cut -f $j $left > $tempcol
			cut -f $j $right > $col	
			echo "left:"
			cat $tempcol
			echo "right:"
			cat $col

			((j++))
		#	while read lmtrx <&3 && read rmtrx <&4
		#	do
		#		sum=$((lmtrx + rmtrx))
		#		echo "sum: $sum"
		#		echo "lmtrx: $lmtrx"
		#		echo "rmtrx: $rmtrx"
		#	done 3<$tempcol 4<$col
			
		done
	
		((i++))
	done


	

	#traverse through the matrix#
#	while read row
	#do
		#reset vars each iteration#
	#	sum=0
	#	count=0


	#	for i in $row
	#	do
			#add all numbers in matrix#
	#		sum=$((sum + i))
	#		((count++))		
	#	done	
#	done <  $temprow
	
		
	#format means for output and print to screen#
#	truncate -s-1 $tempavg	
#	cat $tempavg | tr '\n' '\t' >> $tempmean
#	echo >> $tempmean
#	cat $tempmean

}

#multiply funct#
function multiply(){
	echo "multiply successfully called!"
}


#readMatrix funct#
function readmtrx(){
while read mtrx
do
	echo "$mtrx"
done < $1

}

#removes temporary files#
clean(){
	rm -f *$$
}

#argument 1 from user, identifies what function they would like to use (dims, transpose etc)
#, and the rest passes the matrices to the arguments 
$1 "${@:2}"
clean  
